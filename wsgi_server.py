# Import the Flaskavel application instance from the bootstrap.app module.
from bootstrap.app import app

"""
This deployment setup is designed for Windows servers and integrates seamlessly with IIS (Internet Information Services).
Ensure the deployment includes a properly configured "web.config" file pointing to the project's root directory.

Steps for Deployment:

1. **Activate the Virtual Environment**:
   Run the following command to activate the Python virtual environment:
   ```
   .\venv\Scripts\activate
   ```

2. **Install Required Dependencies**:
   Install the `wfastcgi` package, which is essential for bridging Python and IIS:
   ```
   pip install wfastcgi
   ```

3. **Register the Environment**:
   Use the following command to register the virtual environment with IIS:
   ```
   wfastcgi-enable
   ```
   This updates the configuration file located at:
   ```
   C:\Windows\System32\inetsrv\config\applicationHost.config
   ```
   The configuration will add the environment that is referenced in the "web.config" file.

4. **Configure IIS**:
   After completing the above steps, stop the virtual environment and add the project's root folder as a new application in IIS.

Important: Always ensure the "web.config" file is correctly set up to point to the Flaskavel application's entry point.
"""

def flaskavel(environ, start_response):
    """
    WSGI handler function to bridge between the web server and the Flaskavel application.

    Flaskavel is a Flask-based framework designed for robust and efficient deployment environments.

    Args:
        environ (dict): A dictionary containing the WSGI environment variables.
        start_response (callable): A callable to start the HTTP response.

    Returns:
        Callable: The response generated by the Flaskavel application's WSGI interface.
    """
    return app().handleRequestWSGI(
        environ=environ,
        start_response=start_response
    )
